// Autogenerated by https://jsonformatter.org/json-to-go

package main

type ReportResult struct {
	Config Config        `json:"config"`
	Suites []Suite       `json:"suites"`
	Errors []interface{} `json:"errors"`
	Stats  Stats         `json:"stats"` 
}

type Config struct {
	ConfigFile      string          `json:"configFile"`     
	RootDir         string          `json:"rootDir"`        
	ForbidOnly      bool            `json:"forbidOnly"`     
	FullyParallel   bool            `json:"fullyParallel"`  
	GlobalSetup     interface{}     `json:"globalSetup"`    
	GlobalTeardown  interface{}     `json:"globalTeardown"` 
	GlobalTimeout   int64           `json:"globalTimeout"`  
	Grep            Grep            `json:"grep"`           
	GrepInvert      interface{}     `json:"grepInvert"`     
	MaxFailures     int64           `json:"maxFailures"`    
	Metadata        Metadata        `json:"metadata"`       
	PreserveOutput  string          `json:"preserveOutput"` 
	Reporter        [][]string      `json:"reporter"`       
	ReportSlowTests ReportSlowTests `json:"reportSlowTests"`
	Quiet           bool            `json:"quiet"`          
	Projects        []Project       `json:"projects"`       
	Shard           interface{}     `json:"shard"`          
	UpdateSnapshots string          `json:"updateSnapshots"`
	Version         string          `json:"version"`        
	Workers         int64           `json:"workers"`        
	WebServer       interface{}     `json:"webServer"`      
}

type Grep struct {
}

type Metadata struct {
	ActualWorkers int64 `json:"actualWorkers"`
}

type Project struct {
	OutputDir  string        `json:"outputDir"` 
	RepeatEach int64         `json:"repeatEach"`
	Retries    int64         `json:"retries"`   
	Metadata   Grep          `json:"metadata"`  
	ID         string        `json:"id"`        
	Name       string        `json:"name"`      
	TestDir    string        `json:"testDir"`   
	TestIgnore []interface{} `json:"testIgnore"`
	TestMatch  []string      `json:"testMatch"` 
	Timeout    int64         `json:"timeout"`   
}

type ReportSlowTests struct {
	Max       int64 `json:"max"`      
	Threshold int64 `json:"threshold"`
}

type Stats struct {
	StartTime  string  `json:"startTime"` 
	Duration   float64 `json:"duration"`  
	Expected   int64   `json:"expected"`  
	Skipped    int64   `json:"skipped"`   
	Unexpected int64   `json:"unexpected"`
	Flaky      int64   `json:"flaky"`     
}

type Suite struct {
	Title  string `json:"title"` 
	File   string `json:"file"`  
	Column int64  `json:"column"`
	Line   int64  `json:"line"`  
	Specs  []Spec `json:"specs"` 
}

type Spec struct {
	Title  string        `json:"title"` 
	Ok     bool          `json:"ok"`    
	Tags   []interface{} `json:"tags"`  
	Tests  []Test        `json:"tests"` 
	ID     string        `json:"id"`    
	File   string        `json:"file"`  
	Line   int64         `json:"line"`  
	Column int64         `json:"column"`
}

type Test struct {
	Timeout        int64         `json:"timeout"`       
	Annotations    []interface{} `json:"annotations"`   
	ExpectedStatus string        `json:"expectedStatus"`
	ProjectID      string        `json:"projectId"`     
	ProjectName    string        `json:"projectName"`   
	Results        []Result      `json:"results"`       
	Status         string        `json:"status"`        
}

type Result struct {
	WorkerIndex   int64          `json:"workerIndex"`            
	Status        string         `json:"status"`                 
	Duration      int64          `json:"duration"`               
	Error         *PurpleError   `json:"error,omitempty"`        
	Errors        []ErrorElement `json:"errors"`                 
	Stdout        []interface{}  `json:"stdout"`                 
	Stderr        []interface{}  `json:"stderr"`                 
	Retry         int64          `json:"retry"`                  
	StartTime     string         `json:"startTime"`              
	Attachments   []interface{}  `json:"attachments"`            
	ErrorLocation *Location      `json:"errorLocation,omitempty"`
}

type PurpleError struct {
	Message  string   `json:"message"` 
	Stack    string   `json:"stack"`   
	Location Location `json:"location"`
	Snippet  string   `json:"snippet"` 
}

type Location struct {
	File   string `json:"file"`  
	Column int64  `json:"column"`
	Line   int64  `json:"line"`  
}

type ErrorElement struct {
	Location Location `json:"location"`
	Message  string   `json:"message"` 
}
